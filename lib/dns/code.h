/*
 * Copyright (C) 1998-2015 Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/***************
 ***************
 ***************   THIS FILE IS AUTOMATICALLY GENERATED BY gen.c.
 ***************   DO NOT EDIT!
 ***************
 ***************/

#ifndef DNS_CODE_H
#define DNS_CODE_H 1

#include <isc/boolean.h>
#include <isc/result.h>

#include <dns/name.h>

#include "./rdata/in_1/a_1.c"
#include "./rdata/hs_4/a_1.c"
#include "./rdata/generic/ns_2.c"
#include "./rdata/generic/md_3.c"
#include "./rdata/generic/mf_4.c"
#include "./rdata/generic/cname_5.c"
#include "./rdata/generic/soa_6.c"
#include "./rdata/generic/mb_7.c"
#include "./rdata/generic/mg_8.c"
#include "./rdata/generic/mr_9.c"
#include "./rdata/generic/null_10.c"
#include "./rdata/in_1/wks_11.c"
#include "./rdata/generic/ptr_12.c"
#include "./rdata/generic/hinfo_13.c"
#include "./rdata/generic/minfo_14.c"
#include "./rdata/generic/mx_15.c"
#include "./rdata/generic/txt_16.c"
#include "./rdata/generic/rp_17.c"
#include "./rdata/generic/afsdb_18.c"
#include "./rdata/generic/x25_19.c"
#include "./rdata/generic/isdn_20.c"
#include "./rdata/generic/rt_21.c"
#include "./rdata/in_1/nsap_22.c"
#include "./rdata/in_1/nsap-ptr_23.c"
#include "./rdata/generic/sig_24.c"
#include "./rdata/generic/key_25.c"
#include "./rdata/in_1/px_26.c"
#include "./rdata/generic/gpos_27.c"
#include "./rdata/in_1/aaaa_28.c"
#include "./rdata/generic/loc_29.c"
#include "./rdata/generic/nxt_30.c"
#include "./rdata/in_1/srv_33.c"
#include "./rdata/in_1/naptr_35.c"
#include "./rdata/in_1/kx_36.c"
#include "./rdata/generic/cert_37.c"
#include "./rdata/in_1/a6_38.c"
#include "./rdata/generic/dname_39.c"
#include "./rdata/generic/opt_41.c"
#include "./rdata/generic/unspec_103.c"
#include "./rdata/generic/tkey_249.c"
#include "./rdata/any_255/tsig_250.c"



#define FROMTEXTSWITCH \
	switch (type) { \
	case 1: switch (rdclass) { \
		case 1: result = fromtext_in_a(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		case 4: result = fromtext_hs_a(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 2: result = fromtext_ns(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 3: result = fromtext_md(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 4: result = fromtext_mf(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 5: result = fromtext_cname(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 6: result = fromtext_soa(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 7: result = fromtext_mb(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 8: result = fromtext_mg(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 9: result = fromtext_mr(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 10: result = fromtext_null(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 11: switch (rdclass) { \
		case 1: result = fromtext_in_wks(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 12: result = fromtext_ptr(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 13: result = fromtext_hinfo(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 14: result = fromtext_minfo(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 15: result = fromtext_mx(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 16: result = fromtext_txt(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 17: result = fromtext_rp(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 18: result = fromtext_afsdb(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 19: result = fromtext_x25(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 20: result = fromtext_isdn(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 21: result = fromtext_rt(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 22: switch (rdclass) { \
		case 1: result = fromtext_in_nsap(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 23: switch (rdclass) { \
		case 1: result = fromtext_in_nsap_ptr(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 24: result = fromtext_sig(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 25: result = fromtext_key(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 26: switch (rdclass) { \
		case 1: result = fromtext_in_px(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 27: result = fromtext_gpos(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 28: switch (rdclass) { \
		case 1: result = fromtext_in_aaaa(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 29: result = fromtext_loc(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 30: result = fromtext_nxt(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 33: switch (rdclass) { \
		case 1: result = fromtext_in_srv(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 35: switch (rdclass) { \
		case 1: result = fromtext_in_naptr(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 36: switch (rdclass) { \
		case 1: result = fromtext_in_kx(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 37: result = fromtext_cert(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 38: switch (rdclass) { \
		case 1: result = fromtext_in_a6(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	case 39: result = fromtext_dname(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 41: result = fromtext_opt(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 103: result = fromtext_unspec(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 249: result = fromtext_tkey(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
	case 250: switch (rdclass) { \
		case 255: result = fromtext_any_tsig(rdclass, type, lexer, origin, downcase, target, callbacks); break; \
		default: result = DNS_R_UNKNOWN; break; \
		} \
		break; \
	default: result = DNS_R_UNKNOWN; break; \
	}

#define TOTEXTSWITCH \
	switch (rdata->type) { \
	case 1: switch (rdata->rdclass) { \
		case 1: result = totext_in_a(rdata, tctx, target); break; \
		case 4: result = totext_hs_a(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = totext_ns(rdata, tctx, target); break; \
	case 3: result = totext_md(rdata, tctx, target); break; \
	case 4: result = totext_mf(rdata, tctx, target); break; \
	case 5: result = totext_cname(rdata, tctx, target); break; \
	case 6: result = totext_soa(rdata, tctx, target); break; \
	case 7: result = totext_mb(rdata, tctx, target); break; \
	case 8: result = totext_mg(rdata, tctx, target); break; \
	case 9: result = totext_mr(rdata, tctx, target); break; \
	case 10: result = totext_null(rdata, tctx, target); break; \
	case 11: switch (rdata->rdclass) { \
		case 1: result = totext_in_wks(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = totext_ptr(rdata, tctx, target); break; \
	case 13: result = totext_hinfo(rdata, tctx, target); break; \
	case 14: result = totext_minfo(rdata, tctx, target); break; \
	case 15: result = totext_mx(rdata, tctx, target); break; \
	case 16: result = totext_txt(rdata, tctx, target); break; \
	case 17: result = totext_rp(rdata, tctx, target); break; \
	case 18: result = totext_afsdb(rdata, tctx, target); break; \
	case 19: result = totext_x25(rdata, tctx, target); break; \
	case 20: result = totext_isdn(rdata, tctx, target); break; \
	case 21: result = totext_rt(rdata, tctx, target); break; \
	case 22: switch (rdata->rdclass) { \
		case 1: result = totext_in_nsap(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdata->rdclass) { \
		case 1: result = totext_in_nsap_ptr(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = totext_sig(rdata, tctx, target); break; \
	case 25: result = totext_key(rdata, tctx, target); break; \
	case 26: switch (rdata->rdclass) { \
		case 1: result = totext_in_px(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = totext_gpos(rdata, tctx, target); break; \
	case 28: switch (rdata->rdclass) { \
		case 1: result = totext_in_aaaa(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = totext_loc(rdata, tctx, target); break; \
	case 30: result = totext_nxt(rdata, tctx, target); break; \
	case 33: switch (rdata->rdclass) { \
		case 1: result = totext_in_srv(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdata->rdclass) { \
		case 1: result = totext_in_naptr(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdata->rdclass) { \
		case 1: result = totext_in_kx(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = totext_cert(rdata, tctx, target); break; \
	case 38: switch (rdata->rdclass) { \
		case 1: result = totext_in_a6(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = totext_dname(rdata, tctx, target); break; \
	case 41: result = totext_opt(rdata, tctx, target); break; \
	case 103: result = totext_unspec(rdata, tctx, target); break; \
	case 249: result = totext_tkey(rdata, tctx, target); break; \
	case 250: switch (rdata->rdclass) { \
		case 255: result = totext_any_tsig(rdata, tctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define FROMWIRESWITCH \
	switch (type) { \
	case 1: switch (rdclass) { \
		case 1: result = fromwire_in_a(rdclass, type, source, dctx, downcase, target); break; \
		case 4: result = fromwire_hs_a(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = fromwire_ns(rdclass, type, source, dctx, downcase, target); break; \
	case 3: result = fromwire_md(rdclass, type, source, dctx, downcase, target); break; \
	case 4: result = fromwire_mf(rdclass, type, source, dctx, downcase, target); break; \
	case 5: result = fromwire_cname(rdclass, type, source, dctx, downcase, target); break; \
	case 6: result = fromwire_soa(rdclass, type, source, dctx, downcase, target); break; \
	case 7: result = fromwire_mb(rdclass, type, source, dctx, downcase, target); break; \
	case 8: result = fromwire_mg(rdclass, type, source, dctx, downcase, target); break; \
	case 9: result = fromwire_mr(rdclass, type, source, dctx, downcase, target); break; \
	case 10: result = fromwire_null(rdclass, type, source, dctx, downcase, target); break; \
	case 11: switch (rdclass) { \
		case 1: result = fromwire_in_wks(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = fromwire_ptr(rdclass, type, source, dctx, downcase, target); break; \
	case 13: result = fromwire_hinfo(rdclass, type, source, dctx, downcase, target); break; \
	case 14: result = fromwire_minfo(rdclass, type, source, dctx, downcase, target); break; \
	case 15: result = fromwire_mx(rdclass, type, source, dctx, downcase, target); break; \
	case 16: result = fromwire_txt(rdclass, type, source, dctx, downcase, target); break; \
	case 17: result = fromwire_rp(rdclass, type, source, dctx, downcase, target); break; \
	case 18: result = fromwire_afsdb(rdclass, type, source, dctx, downcase, target); break; \
	case 19: result = fromwire_x25(rdclass, type, source, dctx, downcase, target); break; \
	case 20: result = fromwire_isdn(rdclass, type, source, dctx, downcase, target); break; \
	case 21: result = fromwire_rt(rdclass, type, source, dctx, downcase, target); break; \
	case 22: switch (rdclass) { \
		case 1: result = fromwire_in_nsap(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdclass) { \
		case 1: result = fromwire_in_nsap_ptr(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = fromwire_sig(rdclass, type, source, dctx, downcase, target); break; \
	case 25: result = fromwire_key(rdclass, type, source, dctx, downcase, target); break; \
	case 26: switch (rdclass) { \
		case 1: result = fromwire_in_px(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = fromwire_gpos(rdclass, type, source, dctx, downcase, target); break; \
	case 28: switch (rdclass) { \
		case 1: result = fromwire_in_aaaa(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = fromwire_loc(rdclass, type, source, dctx, downcase, target); break; \
	case 30: result = fromwire_nxt(rdclass, type, source, dctx, downcase, target); break; \
	case 33: switch (rdclass) { \
		case 1: result = fromwire_in_srv(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdclass) { \
		case 1: result = fromwire_in_naptr(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdclass) { \
		case 1: result = fromwire_in_kx(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = fromwire_cert(rdclass, type, source, dctx, downcase, target); break; \
	case 38: switch (rdclass) { \
		case 1: result = fromwire_in_a6(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = fromwire_dname(rdclass, type, source, dctx, downcase, target); break; \
	case 41: result = fromwire_opt(rdclass, type, source, dctx, downcase, target); break; \
	case 103: result = fromwire_unspec(rdclass, type, source, dctx, downcase, target); break; \
	case 249: result = fromwire_tkey(rdclass, type, source, dctx, downcase, target); break; \
	case 250: switch (rdclass) { \
		case 255: result = fromwire_any_tsig(rdclass, type, source, dctx, downcase, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define TOWIRESWITCH \
	switch (rdata->type) { \
	case 1: switch (rdata->rdclass) { \
		case 1: result = towire_in_a(rdata, cctx, target); break; \
		case 4: result = towire_hs_a(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = towire_ns(rdata, cctx, target); break; \
	case 3: result = towire_md(rdata, cctx, target); break; \
	case 4: result = towire_mf(rdata, cctx, target); break; \
	case 5: result = towire_cname(rdata, cctx, target); break; \
	case 6: result = towire_soa(rdata, cctx, target); break; \
	case 7: result = towire_mb(rdata, cctx, target); break; \
	case 8: result = towire_mg(rdata, cctx, target); break; \
	case 9: result = towire_mr(rdata, cctx, target); break; \
	case 10: result = towire_null(rdata, cctx, target); break; \
	case 11: switch (rdata->rdclass) { \
		case 1: result = towire_in_wks(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = towire_ptr(rdata, cctx, target); break; \
	case 13: result = towire_hinfo(rdata, cctx, target); break; \
	case 14: result = towire_minfo(rdata, cctx, target); break; \
	case 15: result = towire_mx(rdata, cctx, target); break; \
	case 16: result = towire_txt(rdata, cctx, target); break; \
	case 17: result = towire_rp(rdata, cctx, target); break; \
	case 18: result = towire_afsdb(rdata, cctx, target); break; \
	case 19: result = towire_x25(rdata, cctx, target); break; \
	case 20: result = towire_isdn(rdata, cctx, target); break; \
	case 21: result = towire_rt(rdata, cctx, target); break; \
	case 22: switch (rdata->rdclass) { \
		case 1: result = towire_in_nsap(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdata->rdclass) { \
		case 1: result = towire_in_nsap_ptr(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = towire_sig(rdata, cctx, target); break; \
	case 25: result = towire_key(rdata, cctx, target); break; \
	case 26: switch (rdata->rdclass) { \
		case 1: result = towire_in_px(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = towire_gpos(rdata, cctx, target); break; \
	case 28: switch (rdata->rdclass) { \
		case 1: result = towire_in_aaaa(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = towire_loc(rdata, cctx, target); break; \
	case 30: result = towire_nxt(rdata, cctx, target); break; \
	case 33: switch (rdata->rdclass) { \
		case 1: result = towire_in_srv(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdata->rdclass) { \
		case 1: result = towire_in_naptr(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdata->rdclass) { \
		case 1: result = towire_in_kx(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = towire_cert(rdata, cctx, target); break; \
	case 38: switch (rdata->rdclass) { \
		case 1: result = towire_in_a6(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = towire_dname(rdata, cctx, target); break; \
	case 41: result = towire_opt(rdata, cctx, target); break; \
	case 103: result = towire_unspec(rdata, cctx, target); break; \
	case 249: result = towire_tkey(rdata, cctx, target); break; \
	case 250: switch (rdata->rdclass) { \
		case 255: result = towire_any_tsig(rdata, cctx, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define COMPARESWITCH \
	switch (rdata1->type) { \
	case 1: switch (rdata1->rdclass) { \
		case 1: result = compare_in_a(rdata1, rdata2); break; \
		case 4: result = compare_hs_a(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = compare_ns(rdata1, rdata2); break; \
	case 3: result = compare_md(rdata1, rdata2); break; \
	case 4: result = compare_mf(rdata1, rdata2); break; \
	case 5: result = compare_cname(rdata1, rdata2); break; \
	case 6: result = compare_soa(rdata1, rdata2); break; \
	case 7: result = compare_mb(rdata1, rdata2); break; \
	case 8: result = compare_mg(rdata1, rdata2); break; \
	case 9: result = compare_mr(rdata1, rdata2); break; \
	case 10: result = compare_null(rdata1, rdata2); break; \
	case 11: switch (rdata1->rdclass) { \
		case 1: result = compare_in_wks(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = compare_ptr(rdata1, rdata2); break; \
	case 13: result = compare_hinfo(rdata1, rdata2); break; \
	case 14: result = compare_minfo(rdata1, rdata2); break; \
	case 15: result = compare_mx(rdata1, rdata2); break; \
	case 16: result = compare_txt(rdata1, rdata2); break; \
	case 17: result = compare_rp(rdata1, rdata2); break; \
	case 18: result = compare_afsdb(rdata1, rdata2); break; \
	case 19: result = compare_x25(rdata1, rdata2); break; \
	case 20: result = compare_isdn(rdata1, rdata2); break; \
	case 21: result = compare_rt(rdata1, rdata2); break; \
	case 22: switch (rdata1->rdclass) { \
		case 1: result = compare_in_nsap(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdata1->rdclass) { \
		case 1: result = compare_in_nsap_ptr(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = compare_sig(rdata1, rdata2); break; \
	case 25: result = compare_key(rdata1, rdata2); break; \
	case 26: switch (rdata1->rdclass) { \
		case 1: result = compare_in_px(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = compare_gpos(rdata1, rdata2); break; \
	case 28: switch (rdata1->rdclass) { \
		case 1: result = compare_in_aaaa(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = compare_loc(rdata1, rdata2); break; \
	case 30: result = compare_nxt(rdata1, rdata2); break; \
	case 33: switch (rdata1->rdclass) { \
		case 1: result = compare_in_srv(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdata1->rdclass) { \
		case 1: result = compare_in_naptr(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdata1->rdclass) { \
		case 1: result = compare_in_kx(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = compare_cert(rdata1, rdata2); break; \
	case 38: switch (rdata1->rdclass) { \
		case 1: result = compare_in_a6(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = compare_dname(rdata1, rdata2); break; \
	case 41: result = compare_opt(rdata1, rdata2); break; \
	case 103: result = compare_unspec(rdata1, rdata2); break; \
	case 249: result = compare_tkey(rdata1, rdata2); break; \
	case 250: switch (rdata1->rdclass) { \
		case 255: result = compare_any_tsig(rdata1, rdata2); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define FROMSTRUCTSWITCH \
	switch (type) { \
	case 1: switch (rdclass) { \
		case 1: result = fromstruct_in_a(rdclass, type, source, target); break; \
		case 4: result = fromstruct_hs_a(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = fromstruct_ns(rdclass, type, source, target); break; \
	case 3: result = fromstruct_md(rdclass, type, source, target); break; \
	case 4: result = fromstruct_mf(rdclass, type, source, target); break; \
	case 5: result = fromstruct_cname(rdclass, type, source, target); break; \
	case 6: result = fromstruct_soa(rdclass, type, source, target); break; \
	case 7: result = fromstruct_mb(rdclass, type, source, target); break; \
	case 8: result = fromstruct_mg(rdclass, type, source, target); break; \
	case 9: result = fromstruct_mr(rdclass, type, source, target); break; \
	case 10: result = fromstruct_null(rdclass, type, source, target); break; \
	case 11: switch (rdclass) { \
		case 1: result = fromstruct_in_wks(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = fromstruct_ptr(rdclass, type, source, target); break; \
	case 13: result = fromstruct_hinfo(rdclass, type, source, target); break; \
	case 14: result = fromstruct_minfo(rdclass, type, source, target); break; \
	case 15: result = fromstruct_mx(rdclass, type, source, target); break; \
	case 16: result = fromstruct_txt(rdclass, type, source, target); break; \
	case 17: result = fromstruct_rp(rdclass, type, source, target); break; \
	case 18: result = fromstruct_afsdb(rdclass, type, source, target); break; \
	case 19: result = fromstruct_x25(rdclass, type, source, target); break; \
	case 20: result = fromstruct_isdn(rdclass, type, source, target); break; \
	case 21: result = fromstruct_rt(rdclass, type, source, target); break; \
	case 22: switch (rdclass) { \
		case 1: result = fromstruct_in_nsap(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdclass) { \
		case 1: result = fromstruct_in_nsap_ptr(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = fromstruct_sig(rdclass, type, source, target); break; \
	case 25: result = fromstruct_key(rdclass, type, source, target); break; \
	case 26: switch (rdclass) { \
		case 1: result = fromstruct_in_px(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = fromstruct_gpos(rdclass, type, source, target); break; \
	case 28: switch (rdclass) { \
		case 1: result = fromstruct_in_aaaa(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = fromstruct_loc(rdclass, type, source, target); break; \
	case 30: result = fromstruct_nxt(rdclass, type, source, target); break; \
	case 33: switch (rdclass) { \
		case 1: result = fromstruct_in_srv(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdclass) { \
		case 1: result = fromstruct_in_naptr(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdclass) { \
		case 1: result = fromstruct_in_kx(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = fromstruct_cert(rdclass, type, source, target); break; \
	case 38: switch (rdclass) { \
		case 1: result = fromstruct_in_a6(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = fromstruct_dname(rdclass, type, source, target); break; \
	case 41: result = fromstruct_opt(rdclass, type, source, target); break; \
	case 103: result = fromstruct_unspec(rdclass, type, source, target); break; \
	case 249: result = fromstruct_tkey(rdclass, type, source, target); break; \
	case 250: switch (rdclass) { \
		case 255: result = fromstruct_any_tsig(rdclass, type, source, target); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define TOSTRUCTSWITCH \
	switch (rdata->type) { \
	case 1: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_a(rdata, target, mctx); break; \
		case 4: result = tostruct_hs_a(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = tostruct_ns(rdata, target, mctx); break; \
	case 3: result = tostruct_md(rdata, target, mctx); break; \
	case 4: result = tostruct_mf(rdata, target, mctx); break; \
	case 5: result = tostruct_cname(rdata, target, mctx); break; \
	case 6: result = tostruct_soa(rdata, target, mctx); break; \
	case 7: result = tostruct_mb(rdata, target, mctx); break; \
	case 8: result = tostruct_mg(rdata, target, mctx); break; \
	case 9: result = tostruct_mr(rdata, target, mctx); break; \
	case 10: result = tostruct_null(rdata, target, mctx); break; \
	case 11: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_wks(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = tostruct_ptr(rdata, target, mctx); break; \
	case 13: result = tostruct_hinfo(rdata, target, mctx); break; \
	case 14: result = tostruct_minfo(rdata, target, mctx); break; \
	case 15: result = tostruct_mx(rdata, target, mctx); break; \
	case 16: result = tostruct_txt(rdata, target, mctx); break; \
	case 17: result = tostruct_rp(rdata, target, mctx); break; \
	case 18: result = tostruct_afsdb(rdata, target, mctx); break; \
	case 19: result = tostruct_x25(rdata, target, mctx); break; \
	case 20: result = tostruct_isdn(rdata, target, mctx); break; \
	case 21: result = tostruct_rt(rdata, target, mctx); break; \
	case 22: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_nsap(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_nsap_ptr(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = tostruct_sig(rdata, target, mctx); break; \
	case 25: result = tostruct_key(rdata, target, mctx); break; \
	case 26: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_px(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = tostruct_gpos(rdata, target, mctx); break; \
	case 28: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_aaaa(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = tostruct_loc(rdata, target, mctx); break; \
	case 30: result = tostruct_nxt(rdata, target, mctx); break; \
	case 33: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_srv(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_naptr(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_kx(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = tostruct_cert(rdata, target, mctx); break; \
	case 38: switch (rdata->rdclass) { \
		case 1: result = tostruct_in_a6(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = tostruct_dname(rdata, target, mctx); break; \
	case 41: result = tostruct_opt(rdata, target, mctx); break; \
	case 103: result = tostruct_unspec(rdata, target, mctx); break; \
	case 249: result = tostruct_tkey(rdata, target, mctx); break; \
	case 250: switch (rdata->rdclass) { \
		case 255: result = tostruct_any_tsig(rdata, target, mctx); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define FREESTRUCTSWITCH \
	switch (common->rdtype) { \
	case 1: switch (common->rdclass) { \
		case 1: freestruct_in_a(source); break; \
		case 4: freestruct_hs_a(source); break; \
		default: break; \
		} \
		break; \
	case 2: freestruct_ns(source); break; \
	case 3: freestruct_md(source); break; \
	case 4: freestruct_mf(source); break; \
	case 5: freestruct_cname(source); break; \
	case 6: freestruct_soa(source); break; \
	case 7: freestruct_mb(source); break; \
	case 8: freestruct_mg(source); break; \
	case 9: freestruct_mr(source); break; \
	case 10: freestruct_null(source); break; \
	case 11: switch (common->rdclass) { \
		case 1: freestruct_in_wks(source); break; \
		default: break; \
		} \
		break; \
	case 12: freestruct_ptr(source); break; \
	case 13: freestruct_hinfo(source); break; \
	case 14: freestruct_minfo(source); break; \
	case 15: freestruct_mx(source); break; \
	case 16: freestruct_txt(source); break; \
	case 17: freestruct_rp(source); break; \
	case 18: freestruct_afsdb(source); break; \
	case 19: freestruct_x25(source); break; \
	case 20: freestruct_isdn(source); break; \
	case 21: freestruct_rt(source); break; \
	case 22: switch (common->rdclass) { \
		case 1: freestruct_in_nsap(source); break; \
		default: break; \
		} \
		break; \
	case 23: switch (common->rdclass) { \
		case 1: freestruct_in_nsap_ptr(source); break; \
		default: break; \
		} \
		break; \
	case 24: freestruct_sig(source); break; \
	case 25: freestruct_key(source); break; \
	case 26: switch (common->rdclass) { \
		case 1: freestruct_in_px(source); break; \
		default: break; \
		} \
		break; \
	case 27: freestruct_gpos(source); break; \
	case 28: switch (common->rdclass) { \
		case 1: freestruct_in_aaaa(source); break; \
		default: break; \
		} \
		break; \
	case 29: freestruct_loc(source); break; \
	case 30: freestruct_nxt(source); break; \
	case 33: switch (common->rdclass) { \
		case 1: freestruct_in_srv(source); break; \
		default: break; \
		} \
		break; \
	case 35: switch (common->rdclass) { \
		case 1: freestruct_in_naptr(source); break; \
		default: break; \
		} \
		break; \
	case 36: switch (common->rdclass) { \
		case 1: freestruct_in_kx(source); break; \
		default: break; \
		} \
		break; \
	case 37: freestruct_cert(source); break; \
	case 38: switch (common->rdclass) { \
		case 1: freestruct_in_a6(source); break; \
		default: break; \
		} \
		break; \
	case 39: freestruct_dname(source); break; \
	case 41: freestruct_opt(source); break; \
	case 103: freestruct_unspec(source); break; \
	case 249: freestruct_tkey(source); break; \
	case 250: switch (common->rdclass) { \
		case 255: freestruct_any_tsig(source); break; \
		default: break; \
		} \
		break; \
	default: break; \
	}

#define ADDITIONALDATASWITCH \
	switch (rdata->type) { \
	case 1: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_a(rdata, add, arg); break; \
		case 4: result = additionaldata_hs_a(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = additionaldata_ns(rdata, add, arg); break; \
	case 3: result = additionaldata_md(rdata, add, arg); break; \
	case 4: result = additionaldata_mf(rdata, add, arg); break; \
	case 5: result = additionaldata_cname(rdata, add, arg); break; \
	case 6: result = additionaldata_soa(rdata, add, arg); break; \
	case 7: result = additionaldata_mb(rdata, add, arg); break; \
	case 8: result = additionaldata_mg(rdata, add, arg); break; \
	case 9: result = additionaldata_mr(rdata, add, arg); break; \
	case 10: result = additionaldata_null(rdata, add, arg); break; \
	case 11: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_wks(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = additionaldata_ptr(rdata, add, arg); break; \
	case 13: result = additionaldata_hinfo(rdata, add, arg); break; \
	case 14: result = additionaldata_minfo(rdata, add, arg); break; \
	case 15: result = additionaldata_mx(rdata, add, arg); break; \
	case 16: result = additionaldata_txt(rdata, add, arg); break; \
	case 17: result = additionaldata_rp(rdata, add, arg); break; \
	case 18: result = additionaldata_afsdb(rdata, add, arg); break; \
	case 19: result = additionaldata_x25(rdata, add, arg); break; \
	case 20: result = additionaldata_isdn(rdata, add, arg); break; \
	case 21: result = additionaldata_rt(rdata, add, arg); break; \
	case 22: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_nsap(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_nsap_ptr(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = additionaldata_sig(rdata, add, arg); break; \
	case 25: result = additionaldata_key(rdata, add, arg); break; \
	case 26: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_px(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = additionaldata_gpos(rdata, add, arg); break; \
	case 28: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_aaaa(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = additionaldata_loc(rdata, add, arg); break; \
	case 30: result = additionaldata_nxt(rdata, add, arg); break; \
	case 33: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_srv(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_naptr(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_kx(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = additionaldata_cert(rdata, add, arg); break; \
	case 38: switch (rdata->rdclass) { \
		case 1: result = additionaldata_in_a6(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = additionaldata_dname(rdata, add, arg); break; \
	case 41: result = additionaldata_opt(rdata, add, arg); break; \
	case 103: result = additionaldata_unspec(rdata, add, arg); break; \
	case 249: result = additionaldata_tkey(rdata, add, arg); break; \
	case 250: switch (rdata->rdclass) { \
		case 255: result = additionaldata_any_tsig(rdata, add, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

#define DIGESTSWITCH \
	switch (rdata->type) { \
	case 1: switch (rdata->rdclass) { \
		case 1: result = digest_in_a(rdata, digest, arg); break; \
		case 4: result = digest_hs_a(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 2: result = digest_ns(rdata, digest, arg); break; \
	case 3: result = digest_md(rdata, digest, arg); break; \
	case 4: result = digest_mf(rdata, digest, arg); break; \
	case 5: result = digest_cname(rdata, digest, arg); break; \
	case 6: result = digest_soa(rdata, digest, arg); break; \
	case 7: result = digest_mb(rdata, digest, arg); break; \
	case 8: result = digest_mg(rdata, digest, arg); break; \
	case 9: result = digest_mr(rdata, digest, arg); break; \
	case 10: result = digest_null(rdata, digest, arg); break; \
	case 11: switch (rdata->rdclass) { \
		case 1: result = digest_in_wks(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 12: result = digest_ptr(rdata, digest, arg); break; \
	case 13: result = digest_hinfo(rdata, digest, arg); break; \
	case 14: result = digest_minfo(rdata, digest, arg); break; \
	case 15: result = digest_mx(rdata, digest, arg); break; \
	case 16: result = digest_txt(rdata, digest, arg); break; \
	case 17: result = digest_rp(rdata, digest, arg); break; \
	case 18: result = digest_afsdb(rdata, digest, arg); break; \
	case 19: result = digest_x25(rdata, digest, arg); break; \
	case 20: result = digest_isdn(rdata, digest, arg); break; \
	case 21: result = digest_rt(rdata, digest, arg); break; \
	case 22: switch (rdata->rdclass) { \
		case 1: result = digest_in_nsap(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 23: switch (rdata->rdclass) { \
		case 1: result = digest_in_nsap_ptr(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 24: result = digest_sig(rdata, digest, arg); break; \
	case 25: result = digest_key(rdata, digest, arg); break; \
	case 26: switch (rdata->rdclass) { \
		case 1: result = digest_in_px(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 27: result = digest_gpos(rdata, digest, arg); break; \
	case 28: switch (rdata->rdclass) { \
		case 1: result = digest_in_aaaa(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 29: result = digest_loc(rdata, digest, arg); break; \
	case 30: result = digest_nxt(rdata, digest, arg); break; \
	case 33: switch (rdata->rdclass) { \
		case 1: result = digest_in_srv(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 35: switch (rdata->rdclass) { \
		case 1: result = digest_in_naptr(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 36: switch (rdata->rdclass) { \
		case 1: result = digest_in_kx(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 37: result = digest_cert(rdata, digest, arg); break; \
	case 38: switch (rdata->rdclass) { \
		case 1: result = digest_in_a6(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	case 39: result = digest_dname(rdata, digest, arg); break; \
	case 41: result = digest_opt(rdata, digest, arg); break; \
	case 103: result = digest_unspec(rdata, digest, arg); break; \
	case 249: result = digest_tkey(rdata, digest, arg); break; \
	case 250: switch (rdata->rdclass) { \
		case 255: result = digest_any_tsig(rdata, digest, arg); break; \
		default: use_default = ISC_TRUE; break; \
		} \
		break; \
	default: use_default = ISC_TRUE; break; \
	}

typedef struct {
	const char *name;
	unsigned int flags;
} typeattr_t;
static typeattr_t typeattr[] = {
	{ "RESERVED0", DNS_RDATATYPEATTR_RESERVED },
	{ "A", RRTYPE_A_ATTRIBUTES },
	{ "NS", RRTYPE_NS_ATTRIBUTES },
	{ "MD", RRTYPE_MD_ATTRIBUTES },
	{ "MF", RRTYPE_MF_ATTRIBUTES },
	{ "CNAME", RRTYPE_CNAME_ATTRIBUTES },
	{ "SOA", RRTYPE_SOA_ATTRIBUTES },
	{ "MB", RRTYPE_MB_ATTRIBUTES },
	{ "MG", RRTYPE_MG_ATTRIBUTES },
	{ "MR", RRTYPE_MR_ATTRIBUTES },
	{ "NULL", RRTYPE_NULL_ATTRIBUTES },
	{ "WKS", RRTYPE_WKS_ATTRIBUTES },
	{ "PTR", RRTYPE_PTR_ATTRIBUTES },
	{ "HINFO", RRTYPE_HINFO_ATTRIBUTES },
	{ "MINFO", RRTYPE_MINFO_ATTRIBUTES },
	{ "MX", RRTYPE_MX_ATTRIBUTES },
	{ "TXT", RRTYPE_TXT_ATTRIBUTES },
	{ "RP", RRTYPE_RP_ATTRIBUTES },
	{ "AFSDB", RRTYPE_AFSDB_ATTRIBUTES },
	{ "X25", RRTYPE_X25_ATTRIBUTES },
	{ "ISDN", RRTYPE_ISDN_ATTRIBUTES },
	{ "RT", RRTYPE_RT_ATTRIBUTES },
	{ "NSAP", RRTYPE_NSAP_ATTRIBUTES },
	{ "NSAP-PTR", RRTYPE_NSAP_PTR_ATTRIBUTES },
	{ "SIG", RRTYPE_SIG_ATTRIBUTES },
	{ "KEY", RRTYPE_KEY_ATTRIBUTES },
	{ "PX", RRTYPE_PX_ATTRIBUTES },
	{ "GPOS", RRTYPE_GPOS_ATTRIBUTES },
	{ "AAAA", RRTYPE_AAAA_ATTRIBUTES },
	{ "LOC", RRTYPE_LOC_ATTRIBUTES },
	{ "NXT", RRTYPE_NXT_ATTRIBUTES },
	{ "EID", DNS_RDATATYPEATTR_RESERVED },
	{ "NIMLOC", DNS_RDATATYPEATTR_RESERVED },
	{ "SRV", RRTYPE_SRV_ATTRIBUTES },
	{ "ATMA", DNS_RDATATYPEATTR_RESERVED },
	{ "NAPTR", RRTYPE_NAPTR_ATTRIBUTES },
	{ "KX", RRTYPE_KX_ATTRIBUTES },
	{ "CERT", RRTYPE_CERT_ATTRIBUTES },
	{ "A6", RRTYPE_A6_ATTRIBUTES },
	{ "DNAME", RRTYPE_DNAME_ATTRIBUTES },
	{ "TYPE40", DNS_RDATATYPEATTR_UNKNOWN},
	{ "OPT", RRTYPE_OPT_ATTRIBUTES },
	{ "TYPE42", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE43", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE44", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE45", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE46", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE47", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE48", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE49", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE50", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE51", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE52", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE53", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE54", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE55", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE56", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE57", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE58", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE59", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE60", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE61", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE62", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE63", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE64", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE65", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE66", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE67", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE68", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE69", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE70", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE71", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE72", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE73", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE74", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE75", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE76", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE77", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE78", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE79", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE80", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE81", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE82", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE83", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE84", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE85", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE86", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE87", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE88", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE89", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE90", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE91", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE92", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE93", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE94", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE95", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE96", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE97", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE98", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE99", DNS_RDATATYPEATTR_UNKNOWN},
	{ "UINFO", DNS_RDATATYPEATTR_RESERVED },
	{ "UID", DNS_RDATATYPEATTR_RESERVED },
	{ "GID", DNS_RDATATYPEATTR_RESERVED },
	{ "UNSPEC", RRTYPE_UNSPEC_ATTRIBUTES },
	{ "TYPE104", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE105", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE106", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE107", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE108", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE109", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE110", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE111", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE112", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE113", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE114", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE115", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE116", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE117", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE118", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE119", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE120", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE121", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE122", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE123", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE124", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE125", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE126", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE127", DNS_RDATATYPEATTR_UNKNOWN},
	{ "TYPE128", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE129", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE130", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE131", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE132", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE133", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE134", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE135", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE136", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE137", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE138", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE139", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE140", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE141", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE142", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE143", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE144", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE145", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE146", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE147", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE148", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE149", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE150", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE151", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE152", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE153", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE154", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE155", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE156", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE157", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE158", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE159", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE160", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE161", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE162", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE163", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE164", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE165", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE166", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE167", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE168", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE169", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE170", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE171", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE172", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE173", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE174", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE175", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE176", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE177", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE178", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE179", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE180", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE181", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE182", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE183", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE184", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE185", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE186", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE187", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE188", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE189", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE190", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE191", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE192", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE193", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE194", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE195", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE196", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE197", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE198", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE199", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE200", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE201", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE202", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE203", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE204", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE205", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE206", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE207", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE208", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE209", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE210", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE211", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE212", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE213", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE214", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE215", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE216", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE217", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE218", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE219", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE220", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE221", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE222", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE223", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE224", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE225", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE226", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE227", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE228", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE229", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE230", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE231", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE232", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE233", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE234", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE235", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE236", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE237", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE238", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE239", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE240", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE241", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE242", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE243", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE244", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE245", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE246", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE247", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TYPE248", DNS_RDATATYPEATTR_UNKNOWN | DNS_RDATATYPEATTR_META},
	{ "TKEY", RRTYPE_TKEY_ATTRIBUTES },
	{ "TSIG", RRTYPE_TSIG_ATTRIBUTES },
	{ "IXFR", DNS_RDATATYPEATTR_META | DNS_RDATATYPEATTR_QUESTIONONLY },
	{ "AXFR", DNS_RDATATYPEATTR_META | DNS_RDATATYPEATTR_QUESTIONONLY },
	{ "MAILB", DNS_RDATATYPEATTR_META | DNS_RDATATYPEATTR_QUESTIONONLY },
	{ "MAILA", DNS_RDATATYPEATTR_META | DNS_RDATATYPEATTR_QUESTIONONLY },
	{ "ANY", DNS_RDATATYPEATTR_META | DNS_RDATATYPEATTR_QUESTIONONLY }
};
#define RDATATYPE_COMPARE(_s, _d, _tn, _n, _tp) \
	do { \
		if (sizeof(_s) - 1 == _n && \
		    strncasecmp(_s,(_tn),(sizeof(_s) - 1)) == 0) { \
			if ((typeattr[_d].flags & DNS_RDATATYPEATTR_RESERVED) != 0) \
				return (ISC_R_NOTIMPLEMENTED); \
			*(_tp) = _d; \
			return (ISC_R_SUCCESS); \
		} \
	} while (0)

#define RDATATYPE_FROMTEXT_SW(_hash,_typename,_length,_typep) \
	switch (_hash) { \
		case 16: \
			RDATATYPE_COMPARE("reserved0", 0, _typename, _length, _typep); \
			break; \
		case 34: \
			RDATATYPE_COMPARE("a", 1, _typename, _length, _typep); \
			break; \
		case 80: \
			RDATATYPE_COMPARE("ns", 2, _typename, _length, _typep); \
			break; \
		case 92: \
			RDATATYPE_COMPARE("md", 3, _typename, _length, _typep); \
			break; \
		case 58: \
			RDATATYPE_COMPARE("mf", 4, _typename, _length, _typep); \
			break; \
		case 8: \
			RDATATYPE_COMPARE("cname", 5, _typename, _length, _typep); \
			RDATATYPE_COMPARE("mx", 15, _typename, _length, _typep); \
			break; \
		case 182: \
			RDATATYPE_COMPARE("soa", 6, _typename, _length, _typep); \
			break; \
		case 126: \
			RDATATYPE_COMPARE("mb", 7, _typename, _length, _typep); \
			break; \
		case 169: \
			RDATATYPE_COMPARE("mg", 8, _typename, _length, _typep); \
			break; \
		case 110: \
			RDATATYPE_COMPARE("mr", 9, _typename, _length, _typep); \
			RDATATYPE_COMPARE("minfo", 14, _typename, _length, _typep); \
			break; \
		case 24: \
			RDATATYPE_COMPARE("null", 10, _typename, _length, _typep); \
			RDATATYPE_COMPARE("kx", 36, _typename, _length, _typep); \
			break; \
		case 206: \
			RDATATYPE_COMPARE("wks", 11, _typename, _length, _typep); \
			break; \
		case 54: \
			RDATATYPE_COMPARE("ptr", 12, _typename, _length, _typep); \
			RDATATYPE_COMPARE("naptr", 35, _typename, _length, _typep); \
			break; \
		case 67: \
			RDATATYPE_COMPARE("hinfo", 13, _typename, _length, _typep); \
			break; \
		case 236: \
			RDATATYPE_COMPARE("txt", 16, _typename, _length, _typep); \
			break; \
		case 192: \
			RDATATYPE_COMPARE("rp", 17, _typename, _length, _typep); \
			break; \
		case 12: \
			RDATATYPE_COMPARE("afsdb", 18, _typename, _length, _typep); \
			break; \
		case 119: \
			RDATATYPE_COMPARE("x25", 19, _typename, _length, _typep); \
			break; \
		case 214: \
			RDATATYPE_COMPARE("isdn", 20, _typename, _length, _typep); \
			break; \
		case 144: \
			RDATATYPE_COMPARE("rt", 21, _typename, _length, _typep); \
			break; \
		case 224: \
			RDATATYPE_COMPARE("nsap", 22, _typename, _length, _typep); \
			RDATATYPE_COMPARE("uid", 101, _typename, _length, _typep); \
			break; \
		case 140: \
			RDATATYPE_COMPARE("nsap-ptr", 23, _typename, _length, _typep); \
			break; \
		case 122: \
			RDATATYPE_COMPARE("sig", 24, _typename, _length, _typep); \
			break; \
		case 254: \
			RDATATYPE_COMPARE("key", 25, _typename, _length, _typep); \
			break; \
		case 112: \
			RDATATYPE_COMPARE("px", 26, _typename, _length, _typep); \
			break; \
		case 17: \
			RDATATYPE_COMPARE("gpos", 27, _typename, _length, _typep); \
			break; \
		case 69: \
			RDATATYPE_COMPARE("aaaa", 28, _typename, _length, _typep); \
			RDATATYPE_COMPARE("atma", 34, _typename, _length, _typep); \
			break; \
		case 237: \
			RDATATYPE_COMPARE("loc", 29, _typename, _length, _typep); \
			break; \
		case 52: \
			RDATATYPE_COMPARE("nxt", 30, _typename, _length, _typep); \
			break; \
		case 160: \
			RDATATYPE_COMPARE("eid", 31, _typename, _length, _typep); \
			break; \
		case 220: \
			RDATATYPE_COMPARE("nimloc", 32, _typename, _length, _typep); \
			break; \
		case 100: \
			RDATATYPE_COMPARE("srv", 33, _typename, _length, _typep); \
			break; \
		case 172: \
			RDATATYPE_COMPARE("cert", 37, _typename, _length, _typep); \
			break; \
		case 226: \
			RDATATYPE_COMPARE("a6", 38, _typename, _length, _typep); \
			break; \
		case 109: \
			RDATATYPE_COMPARE("dname", 39, _typename, _length, _typep); \
			break; \
		case 168: \
			RDATATYPE_COMPARE("opt", 41, _typename, _length, _typep); \
			break; \
		case 230: \
			RDATATYPE_COMPARE("uinfo", 100, _typename, _length, _typep); \
			break; \
		case 104: \
			RDATATYPE_COMPARE("gid", 102, _typename, _length, _typep); \
			break; \
		case 145: \
			RDATATYPE_COMPARE("unspec", 103, _typename, _length, _typep); \
			break; \
		case 184: \
			RDATATYPE_COMPARE("tkey", 249, _typename, _length, _typep); \
			break; \
		case 72: \
			RDATATYPE_COMPARE("tsig", 250, _typename, _length, _typep); \
			break; \
		case 138: \
			RDATATYPE_COMPARE("ixfr", 251, _typename, _length, _typep); \
			break; \
		case 250: \
			RDATATYPE_COMPARE("axfr", 252, _typename, _length, _typep); \
			break; \
		case 164: \
			RDATATYPE_COMPARE("mailb", 253, _typename, _length, _typep); \
			break; \
		case 50: \
			RDATATYPE_COMPARE("maila", 254, _typename, _length, _typep); \
			break; \
		case 68: \
			RDATATYPE_COMPARE("any", 255, _typename, _length, _typep); \
			break; \
	}
#endif /* DNS_CODE_H */
